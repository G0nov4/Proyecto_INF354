# -*- coding: utf-8 -*-
"""Proyecto.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_4TeZbSQS0qfbfS4Bxk6GyJM7hKzhLgk
"""

from google.colab import drive
drive.mount('/content/drive')
import os
os.chdir("/content/drive/MyDrive/Datos2")

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import re
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.tree  import DecisionTreeClassifier
from sklearn.metrics import confusion_matrix, accuracy_score
from imblearn.over_sampling import RandomOverSampler

data=pd.read_csv('diabetes_binary_health_indicators_BRFSS2015.csv')
data = data_clean(data)

"""Limpieza de datos que ayudaran al momento de preprosesar los datos"""

def data_clean(dataframe):

    bins = [0, 18.5, 24.9, 29.9, float('inf')]
    labels = [1,2,3,4]

    df = (dataframe
         .drop_duplicates()
         .assign(BMI_bins=dataframe.BMI.pipe(pd.cut, bins=bins, labels=labels))
         .reset_index(drop=True)
         .astype({'Diabetes_binary':'uint8',
     'HighBP':'uint8',
     'HighChol':'uint8',
     'CholCheck':'uint8',
     'BMI':'uint8',
     'Smoker':'uint8',
     'Stroke':'uint8',
     'HeartDiseaseorAttack':'uint8',
     'PhysActivity':'uint8',
     'Fruits':'uint8',
     'Veggies':'uint8',
     'HvyAlcoholConsump':'uint8',
     'AnyHealthcare':'uint8',
     'NoDocbcCost':'uint8',
     'GenHlth':'uint8',
     'MentHlth':'uint8',
     'PhysHlth':'uint8',
     'DiffWalk':'uint8',
     'Sex':'uint8',
     'Age':'uint8',
     'Education':'uint8',
     'Income':'uint8',
     'BMI_bins':'uint8'})


         )
    return df

"""# Preprosesamiento"""

# df.shape
print(f"Num rows: {len(data)}")
print(f"Num columns: {len(data.columns)}")

"""imprimimos los valore unicos que tenemos dentro de cada columna."""

for column in data.columns:
    unique_values = data[column].unique()
    print("Unique values for column", column, ":")
    print(unique_values)
    print()

#Function to view the value counts for the whole data
def v_counts(dataframe):
    for i in dataframe :
        print(dataframe[i].value_counts())
        print("_____________________________________________________________________________")
v_counts(data)

"""### Verificacion de datos nulos"""

data.isnull().sum()

"""Como podemos ver no existen valores nulos dentro de los campos

# Verificacion de datos Duplicados
"""

data.duplicated().sum()

data.drop_duplicates(inplace=True)

data.duplicated().sum()

"""# Clasificador
Para este seccion hemos seleccionaod el calsificador de arbol de desicion

Para este proceso lo que primero vamos a hacer es Scalar las caracteristicas(X) y separar el objetivo (Y)
"""

X = data.drop(['Diabetes_binary'],axis=1)
y = data['Diabetes_binary']


oversampler = RandomOverSampler()
X_resampled, y_resampled = oversampler.fit_resample(X, y)

scaler = StandardScaler()
scaler.fit(X)

"""Verificamos"""

scaled_features = scaler.transform(X)
X = pd.DataFrame(scaled_features,columns=data.columns[1:])
X.head(10)

X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.20, random_state=0)

model= DecisionTreeClassifier()
model.fit(X_train , y_train)

print(model.score(X_train , y_train))
print(model.score(X_test, y_test))

# Calcular la matriz de confusión

y_pred = model.predict(X_test)

confusion = confusion_matrix(y_test, y_pred)
print("Matriz de Confusión:")
print(confusion)


# Calcular la precisión del clasificador
accuracy = accuracy_score(y_test, y_pred)
print("Precisión del Clasificador:", accuracy)

"""* En la clase 0, hay 36,922 instancias que fueron clasificadas correctamente como clase 0, 155 instancias que fueron clasificadas incorrectamente como clase 1 y 1,039 instancias que fueron clasificadas incorrectamente como clase 2.
* En la clase 1, hay 176 instancias que fueron clasificadas incorrectamente como clase 0, 694 instancias que fueron clasificadas correctamente como clase 1 y 36 instancias que fueron clasificadas incorrectamente como clase 2.
* En la clase 2, hay 1,075 instancias que fueron clasificadas incorrectamente como clase 0, 61 instancias que fueron clasificadas incorrectamente como clase 1 y 5,799 instancias que fueron clasificadas correctamente como clase 2.

# Primera ejecucion
Splits: al menos 100 asignaciones, la mediana de la confiabilidad
Académico (primera ejecucion) 80(train)/20(test) – Investigación 50/50 (segunda
ejecución)
"""

accuracy_list=[]
for i in range(100):
  X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.20, random_state=0)
  model= DecisionTreeClassifier()
  model.fit(X_train , y_train)
  y_pred = model.predict(X_test)
  confusion = confusion_matrix(y_test, y_pred)
  print("Matriz de Confusión:")
  print(confusion)
  accuracy = accuracy_score(y_test, y_pred)
  print("Precisión del Clasificador:", accuracy)
  accuracy_list.append(accuracy)
  print("__________________________________________________")
print(accuracy_list)
print(np.mean(accuracy_list))

"""# Segunda ejecucion"""

accuracy_list=[]
for i in range(100):
  X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.50, random_state=0)
  model= DecisionTreeClassifier()
  model.fit(X_train , y_train)
  y_pred = model.predict(X_test)
  confusion = confusion_matrix(y_test, y_pred)
  print("Matriz de Confusión:")
  print(confusion)
  accuracy = accuracy_score(y_test, y_pred)
  print("Precisión del Clasificador:", accuracy)
  accuracy_list.append(accuracy)-
  print("__________________________________________________")
print(accuracy_list)
print(np.mean(accuracy_list))